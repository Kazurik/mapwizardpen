#!/bin/bash

displays=( $(xrandr | grep " connected" | awk '{print $1}') )
#resolutions=( $( xrandr -q | grep " connected" | cut -d "x" -f 1 | awk '{ print $NF}') )
resolutionsX=( $(xrandr -q | grep " connected" | perl -lne '/(\d+)x\d+/ && print $1') )
resolutionsY=( $(xrandr -q | grep " connected" | perl -lne '/\d+x(\d+)/ && print $1') )

function containsElement () {
  local v
  for v in $1; do [[ "$v" == $2 ]] && return 0; done
  return 1
}

n=-1

for (( i = 0; i < ${#displays[@]} ; i++ )) do
	if [[ ${displays[$i]} == $2 ]] 
	then
		n=$i;
	fi
done

maxHeight=0

if [ $# == 2  ] && [ $n -gt -1 ];
then
	totalWidth=0
	totalHeight=0
	targetWidth=${resolutionsX[$n]}
	targetHeight=${resolutionsY[$n]}
	for (( i = 0; i < ${#resolutionsX[@]} ; i++ )) do
		totalWidth=$(echo "${resolutionsX[$i]} + $totalWidth" | bc)
		totalHeight=$(echo "${resolutionsY[$i]} + $totalHeight" | bc)
		if [ ${resolutionsY[$i]} -gt $maxHeight ]; 
		then 
			maxHeight=${resolutionsY[$i]}
		fi
		#totalWidth=$totalWidth + `echo $res | cut -d "x" -f 1`
		#echo ( $(echo $res | cut -d "x" -f 1) )
		#totalWidth= $totalWidth + $(echo $res | cut -d "x" -f 1)
		#echo $totalWidth
	done
fi

horizontalOffset=0
for (( i = 0; i < $n; i++ )) do
	horizontalOffset=$(echo "${resolutionsX[$i]} + $horizontalOffset" | bc)
done
eval "xinput set-prop \"$1\" --type=float \"Coordinate Transformation Matrix\" "$(echo - | awk "{ print $targetWidth/$totalWidth}") "0" $(echo - | awk "{ print $horizontalOffset/$totalWidth}") "0 " $(echo - | awk "{ print $targetHeight/$maxHeight}") "0 0 0 1"
